import{_ as t,r as n,o as p,c as u,a as l,d as a,e as s,b as c}from"./app-B6NiJo-f.js";const d={},o={href:"https://github.com/xiaoshiguang123/VUE_Code",target:"_blank",rel:"noopener noreferrer"},r=c(`<blockquote><p>Git的使用我觉得是很重要的,尤其对于学习方面,以及未来可能面临的多人团队开发,Git都是很好的解决方案。</p></blockquote><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录：</span></a></h2><ol><li>实例化 Vue 对象</li><li>Vue 的数据和方法</li><li>Vue 的属性绑定</li><li>事件修饰符</li><li>v-model</li><li>Vue中class</li><li>Vue中style</li><li>v-for</li></ol><h3 id="notes" tabindex="-1"><a class="header-anchor" href="#notes"><span>Notes：</span></a></h3><ul><li><p>el: element 需要获取的元素，一定是 html 中的根容器元素</p></li><li><p>data: 用于存储数据</p></li><li><p>methods: 用于定义当前实例各种方法</p></li><li><p>data-binding: 给属性绑定对应的值</p></li><li><p>v-cloak:</p><ul><li>只替换插值表达式部分，不清空整个元素</li><li>解决插值表达式闪烁问题</li><li>用法:在style中添加[v-cloak]的display为none</li></ul></li><li><p>v-text无闪烁问题</p><ul><li>覆盖当前标签内容</li><li>用法:<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>v-html</p><ul><li>可正常输出HTML标签</li><li>覆盖原有html内容</li></ul></li><li><p>v-bind 绑定属性的指令</p><ul><li>用法:<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>按钮<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>可简写为英文&quot; : &quot;，后面可以写合法JS表达式</li></ul></li><li><p>v-on 事件绑定机制</p></li><li><p>可简写为 &quot; @ &quot;</p></li><li><p>事件修饰符</p><ul><li><p>.stop 阻止冒泡</p></li><li><p>.prevent 阻止默认事件</p></li><li><p>.capture 捕获模式(从外向内)</p></li><li><p>.self 只有点击当前元素,才触发事件处理函数</p></li><li><p>.once 只触发一次事件处理函数</p></li><li><p>注意</p><ul><li>.self只会阻止自身的冒泡,不会阻止其余冒泡行为</li></ul></li></ul></li><li><p>v-model 双向数据绑定</p><ul><li>v-bind:单向数据绑定</li><li>用法:例如<code>v-model=&quot;msg&quot;</code>无需写value</li><li>只能用于表单元素中(input相关)</li></ul></li><li><p>Vue中class使用</p><ol><li>直接传递一个数组,class用v-bind做数据绑定</li><li>在数组中使用三元表达式</li><li>数组中使用对象代替三元表达式,提高代码可读性</li><li>对象属性为类名,由于对象属性引号可省略,属性的值为标识符</li></ol><div class="language-Vue line-numbers-mode" data-ext="Vue" data-title="Vue"><pre class="language-Vue"><code><span class="line"></span>
<span class="line">&lt;h1 :class=&quot;classObj&quot;&gt;这是h1标签&lt;/h1&gt;</span>
<span class="line">classObj: {red:true, thin:true, italic:false, active:true}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vue中内联样式style的使用</p><ul><li>行内v-bind直接写样式对象</li><li>样式对象定义到data中引用</li><li>通过数组引用多个样式对象</li></ul></li><li><p>v-for循环普通数组</p><div class="language-Vue line-numbers-mode" data-ext="Vue" data-title="Vue"><pre class="language-Vue"><code><span class="line">	&lt;p v-for=&quot;(item, i) in list&quot;&gt;</span>
<span class="line">		索引值:{{ i }}</span>
<span class="line">		每一项值:{{ item }}</span>
<span class="line">	&lt;/p&gt;</span>
<span class="line">	data:{</span>
<span class="line">			list:[1, 2, 3, 4, 5]</span>
<span class="line">		}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>v-for循环对象数组</p><div class="language-Vue line-numbers-mode" data-ext="Vue" data-title="Vue"><pre class="language-Vue"><code><span class="line">	&lt;p v-for=&quot;(user,i) in list&quot;&gt;</span>
<span class="line">		ID:{{ user.id }}</span>
<span class="line">		名字:{{ user.name }}</span>
<span class="line">		索引:{{ i }}</span>
<span class="line">	&lt;/p&gt;   	</span>
<span class="line">	data:{</span>
<span class="line">		list:[</span>
<span class="line">		{id: 1, name: &#39;zs1&#39;},</span>
<span class="line">		{id: 2, name: &#39;zs2&#39;},</span>
<span class="line">		{id: 3, name: &#39;zs3&#39;},</span>
<span class="line">		{id: 4, name: &#39;zs4&#39;}</span>
<span class="line">		]</span>
<span class="line">	}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>v-for循环对象</p><div class="language-Vue line-numbers-mode" data-ext="Vue" data-title="Vue"><pre class="language-Vue"><code><span class="line">&lt;p v-for=&quot;(val, key, index) in user&quot;&gt;</span>
<span class="line">	值为:{{ val }}</span>
<span class="line">	</span>
<span class="line">	键:{{ key }}</span>
<span class="line"></span>
<span class="line">	索引:{{ index }}</span>
<span class="line">&lt;/p&gt;</span>
<span class="line">data:{</span>
<span class="line">	user:{</span>
<span class="line">		id: 1,</span>
<span class="line">		name: &#39;tony&#39;,</span>
<span class="line">		gender: &#39;男&#39;</span>
<span class="line">		}</span>
<span class="line">	},</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>v-for迭代数字</p><div class="language-Vue line-numbers-mode" data-ext="Vue" data-title="Vue"><pre class="language-Vue"><code><span class="line">&lt;p v-for=&quot;count in 10&quot;&gt;</span>
<span class="line">		这是第 {{count}} 次循环</span>
<span class="line">&lt;/p&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意:v-for迭代数字,从1开始</li></ul></li><li><p>v-for中key的使用及注意</p><blockquote><p>Vue2.2.0+版本使用v-for,必须使用key</p></blockquote><ul><li>在使用v-for时,如果出现问题，应当指定唯一的字符串/数字</li><li>v-for循环时key属性只能使用number或者string</li><li>key使用时必须使用v-bind绑定指定key值</li></ul></li><li><p>v-if和v-show的使用</p><ul><li><p>v-if</p><ul><li>每次都会重新删除或创建元素</li><li>切换性能消耗严重</li></ul></li><li><p>v-show</p><ul><li>每次不会重新进行DOM操作,只切换display:none</li><li>初始渲染消耗高</li></ul></li><li><p>频换切换使用v-show</p></li><li><p>元素可能不会永远显示用v-if\\</p></li></ul></li></ul>`,5);function v(m,b){const e=n("Boxx"),i=n("ExternalLinkIcon");return p(),u("div",null,[l(e),a("p",null,[s("最近也是很忙,白天课很多,课余时间忙的有点莫名其妙,也没做什么成果出来,利用课余时间学习Vue,记录一下学习的历程和笔记。相关学习代码已经同步在"),a("a",o,[s("Github"),l(i)]),s("上。")]),r])}const h=t(d,[["render",v],["__file","20190524LearnVue.html.vue"]]),k=JSON.parse('{"path":"/blogs/note/20190524LearnVue.html","title":"Vue学习笔记","lang":"en-US","frontmatter":{"title":"Vue学习笔记","author":"Rain","tags":["Vue"],"categories":["note"],"date":"2019-05-24 21:52","keys":["e10adc3949ba59abbe56e057f20f883e"]},"headers":[{"level":2,"title":"目录：","slug":"目录","link":"#目录","children":[{"level":3,"title":"Notes：","slug":"notes","link":"#notes","children":[]}]}],"git":{"createdTime":1717432393000,"updatedTime":1717432393000,"contributors":[{"name":"Rain","email":"smalltime153@gmail.com","commits":1}]},"filePathRelative":"blogs/note/20190524LearnVue.md"}');export{h as comp,k as data};
