import{_ as o,r as e,o as l,c,a as s,d as n,e as p,b as i}from"./app-B6NiJo-f.js";const r={},u=i(`<ul><li><p>浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以<strong>如果其中一个对象改变了这个地址，就会影响到另一个对象</strong>。</p></li><li><p>深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且<strong>修改新对象不会影响原对象</strong>。</p></li><li><p>浅拷贝只复制指向某个对象的指针，而不复制对象本身，<strong>新旧对象还是共享同一块内存</strong>。但深拷贝会另外创造一个一模一样的对象，<strong>新对象跟原对象不共享内存</strong>，修改新对象不会改到原对象。</p></li></ul><h2 id="浅拷贝的实现方式" tabindex="-1"><a class="header-anchor" href="#浅拷贝的实现方式"><span>浅拷贝的实现方式</span></a></h2><h4 id="_1-object-assign" tabindex="-1"><a class="header-anchor" href="#_1-object-assign"><span>1.Object.assign()</span></a></h4><p>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">person</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">sports</span><span class="token operator">:</span><span class="token string">&#39;basketball&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">obj2<span class="token punctuation">.</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;xiaohua&quot;</span><span class="token punctuation">;</span></span>
<span class="line">obj2<span class="token punctuation">.</span>sports <span class="token operator">=</span> <span class="token string">&#39;football&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">// { person: { name: &#39;xiaohua&#39;, age: 18 }, sports: &#39;basketball&#39; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-展开运算符" tabindex="-1"><a class="header-anchor" href="#_2-展开运算符"><span>2.展开运算符...</span></a></h4><p>展开运算符是一个 es6 / es2015特性，它提供了一种非常方便的方式来执行浅拷贝，这与 Object.assign ()的功能相同。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xiaoming&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> obj2<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span> obj1<span class="token punctuation">}</span></span>
<span class="line">obj1<span class="token punctuation">.</span>address<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line">obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;xiaohua&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj2&#39;</span><span class="token punctuation">,</span>obj2<span class="token punctuation">)</span> <span class="token comment">// obj2 { name: &#39;xiaoming&#39;, address: { x: 200, y: 100 } }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-array-prototype-concat" tabindex="-1"><a class="header-anchor" href="#_3-array-prototype-concat"><span>3.Array.prototype.concat()</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;xiaoming&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">&#39;xiaohua&#39;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">//[ 1, 3, { username: &#39;xiaohua&#39; } ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-array-prototype-slice" tabindex="-1"><a class="header-anchor" href="#_4-array-prototype-slice"><span>4.Array.prototype.slice()</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39; xiaoming&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">arr3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">&#39;xiaohua&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">// [ 1, 3, { username: &#39;xiaohua&#39; } ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深拷贝的实现方式" tabindex="-1"><a class="header-anchor" href="#深拷贝的实现方式"><span>深拷贝的实现方式</span></a></h2><h4 id="_1-json-parse-json-stringify" tabindex="-1"><a class="header-anchor" href="#_1-json-parse-json-stringify"><span>1.JSON.parse(JSON.stringify())</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39; xiaoming&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">arr4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">&#39;xiaohua&#39;</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr4<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这也是利用JSON.stringify将对象转成JSON字符串，再用JSON.parse把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。</p><blockquote><p>注意：不能处理函数和正则，因为处理后得到的正则变为空对象，得到的函数变为null</p></blockquote><h4 id="_2-递归方法" tabindex="-1"><a class="header-anchor" href="#_2-递归方法"><span>2.递归方法</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> </span>
<span class="line">    <span class="token keyword">return</span> obj<span class="token punctuation">;</span> </span>
<span class="line">    <span class="token comment">// null或undefined不进行拷贝操作</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> </span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> </span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2>`,20),k={href:"https://segmentfault.com/a/1190000020255831",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.kancloud.cn/ljw789478944/interview/397319",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.im/post/59ac1c4ef265da248e75892b",target:"_blank",rel:"noopener noreferrer"},m={href:"https://segmentfault.com/a/1190000016672263",target:"_blank",rel:"noopener noreferrer"},b={href:"https://flaviocopes.com/how-to-clone-javascript-object/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/ljianshu/Blog/issues/5",target:"_blank",rel:"noopener noreferrer"};function g(y,j){const t=e("Boxx"),a=e("ExternalLinkIcon");return l(),c("div",null,[s(t),u,n("ul",null,[n("li",null,[n("a",k,[p("如何写出一个惊艳面试官的深拷贝?"),s(a)])]),n("li",null,[n("a",d,[p("JavaScript浅拷贝和深拷贝"),s(a)])]),n("li",null,[n("a",v,[p("js 深拷贝 vs 浅拷贝"),s(a)])]),n("li",null,[n("a",m,[p("深拷贝的终极探索（99%的人都不知道)"),s(a)])]),n("li",null,[n("a",b,[p("How to deep clone a JavaScript object"),s(a)])]),n("li",null,[n("a",h,[p("深拷贝与浅拷贝"),s(a)])])])])}const _=o(r,[["render",g],["__file","20201217deepClone.html.vue"]]),x=JSON.parse('{"path":"/blogs/web/20201217deepClone.html","title":"浅拷贝与深拷贝","lang":"en-US","frontmatter":{"title":"浅拷贝与深拷贝","author":"Rain","date":"2020-12-16 00:20:05","categories":["web"],"tags":["面试","JavaScript"]},"headers":[{"level":2,"title":"浅拷贝的实现方式","slug":"浅拷贝的实现方式","link":"#浅拷贝的实现方式","children":[]},{"level":2,"title":"深拷贝的实现方式","slug":"深拷贝的实现方式","link":"#深拷贝的实现方式","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1717432393000,"updatedTime":1717432393000,"contributors":[{"name":"Rain","email":"smalltime153@gmail.com","commits":1}]},"filePathRelative":"blogs/web/20201217deepClone.md"}');export{_ as comp,x as data};
