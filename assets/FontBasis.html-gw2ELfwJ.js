import{_ as l,r as e,o as i,c as n,a as s,b as t}from"./app-B6NiJo-f.js";const c={},d=t(`<h2 id="html相关" tabindex="-1"><a class="header-anchor" href="#html相关"><span>HTML相关</span></a></h2><h3 id="如何声明页面是html5页面" tabindex="-1"><a class="header-anchor" href="#如何声明页面是html5页面"><span>如何声明页面是HTML5页面?</span></a></h3><p><code>&lt;!DOCTYPE html&gt;</code></p><h3 id="页面乱码是如何产生的" tabindex="-1"><a class="header-anchor" href="#页面乱码是如何产生的"><span>页面乱码是如何产生的</span></a></h3><ul><li>编码与解码的方式不一致</li><li>浏览器不能自动检测网页编码</li><li>网页源代码是gbk，然后中文内容是utf-8，然后浏览器以utf-8解码就会乱码</li></ul><h3 id="列举你所知道的meta类型有哪些" tabindex="-1"><a class="header-anchor" href="#列举你所知道的meta类型有哪些"><span>列举你所知道的meta类型有哪些</span></a></h3><p><code>&lt;meta name=&quot;keywords&quot; content=&quot;关键字&quot;&gt;</code></p><p>利于搜索引擎爬取页面，提高排名</p><p><code>&lt;meta name=&quot;description&quot; content=&quot;页面描述&quot;&gt;</code></p><p>搜索引擎中对页面的描述信息</p><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code></p><p>声明此页面可能会在手机浏览器查看，不会导致页面变得很小,也方面开发者进行适配等</p><p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code> 声明IE浏览器已最新版的模式进行文档的渲染，也就是任何 IE 版本都以当前版本所支持的最高级标准模式渲染，避免版本升级造成的影响。</p><h3 id="列举你所知道的全局属性" tabindex="-1"><a class="header-anchor" href="#列举你所知道的全局属性"><span>列举你所知道的全局属性</span></a></h3><ul><li>class</li><li>id</li><li>src</li><li>style</li><li>name</li><li>hidden</li><li>title</li><li>tabindex</li><li>data-*</li><li>accesskey</li></ul><h3 id="id与class有什么区别" tabindex="-1"><a class="header-anchor" href="#id与class有什么区别"><span>id与class有什么区别</span></a></h3><ul><li>d具有唯一性，calss具有普遍性</li><li>id是唯一的，尽量与js配合使用</li><li>class是类属性,是可重复的，通常用于页面的样式</li><li>id优先级高于class</li></ul><h3 id="html语义化的作用" tabindex="-1"><a class="header-anchor" href="#html语义化的作用"><span>HTML语义化的作用</span></a></h3><ul><li>可以让开发者看起来结构清晰,方便阅读，提高可读性，方便维护与开发</li><li>利于SEO,搜索引擎更容易爬取对应的内容</li><li>利于更多设备解析。</li><li>提高用户体验，title,alt用于解释名词和图片信息</li></ul><h3 id="a标签的target属性有哪些值" tabindex="-1"><a class="header-anchor" href="#a标签的target属性有哪些值"><span>a标签的target属性有哪些值</span></a></h3><ul><li>_blank 会打开一个新窗口来打开页面</li><li>_self 默认值，会在相同的框架打开</li><li>_parent 在父框架打开，如果没有效果和_self一样</li><li>_top 在指定的框架中打开</li></ul><h3 id="html输入表单类型" tabindex="-1"><a class="header-anchor" href="#html输入表单类型"><span>HTML输入表单类型</span></a></h3><ul><li>text</li><li>password</li><li>tel</li><li>file</li><li>checkbox</li><li>date</li><li>hidden</li><li>image</li><li>number</li><li>color</li><li>email</li></ul><h3 id="输入表单有哪些常见属性" tabindex="-1"><a class="header-anchor" href="#输入表单有哪些常见属性"><span>输入表单有哪些常见属性</span></a></h3><ul><li>type</li><li>name</li><li>readonly</li><li>disable</li><li>autocomplete</li><li>from</li><li>value</li><li>tabindex</li><li>required</li><li>autofocus</li><li>checked</li></ul><h3 id="什么是html5" tabindex="-1"><a class="header-anchor" href="#什么是html5"><span>什么是HTML5</span></a></h3><h4 id="狭义与广义" tabindex="-1"><a class="header-anchor" href="#狭义与广义"><span>狭义与广义</span></a></h4><h5 id="狭义" tabindex="-1"><a class="header-anchor" href="#狭义"><span>狭义</span></a></h5><p>HTML5表示是HTML的一种新版语言，增加了标签，绘画，并增强了行为，语义化</p><h5 id="广义" tabindex="-1"><a class="header-anchor" href="#广义"><span>广义</span></a></h5><p>广义的HTML5,就是一般网站上所用到的新技术，简称为HTML5</p><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h4><h5 id="新增的标签" tabindex="-1"><a class="header-anchor" href="#新增的标签"><span>新增的标签</span></a></h5><p><code>section</code>,<code>header</code>,<code>footer</code>,<code>article</code>,<code>nav</code>,<code>aside</code>,并且具有更加丰富的表单的类型</p><h5 id="性能的提升" tabindex="-1"><a class="header-anchor" href="#性能的提升"><span>性能的提升</span></a></h5><p>新增<code>Web Workers</code>多线程的支持，并且优化了<code>JavaScript</code>的引擎</p><h5 id="离线存储的支持" tabindex="-1"><a class="header-anchor" href="#离线存储的支持"><span>离线存储的支持</span></a></h5><p><code>localstorage</code>,<code>indexdb</code>,离线缓存等</p><h5 id="_2d-3d绘图" tabindex="-1"><a class="header-anchor" href="#_2d-3d绘图"><span>2d,3d绘图</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">canvas,svg</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="新的通讯机制" tabindex="-1"><a class="header-anchor" href="#新的通讯机制"><span>新的通讯机制</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">WebSock,WebRTC</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="硬件设备的支持" tabindex="-1"><a class="header-anchor" href="#硬件设备的支持"><span>硬件设备的支持</span></a></h5><p>支持调用摄像头，定位，方向传感器等</p><h5 id="丰富的效果展示" tabindex="-1"><a class="header-anchor" href="#丰富的效果展示"><span>丰富的效果展示</span></a></h5><p>边框，应用，过度，动画等</p><h3 id="html5新增了哪些标签和表单类型" tabindex="-1"><a class="header-anchor" href="#html5新增了哪些标签和表单类型"><span>HTML5新增了哪些标签和表单类型</span></a></h3><ul><li>tel</li><li>canvas</li><li>svg</li><li>header</li><li>footer</li><li>section</li><li>article</li><li>aside</li><li>nav</li><li>email</li><li>color</li><li>date</li><li>number</li><li>audio</li><li>video</li></ul><h3 id="html5有哪些新特性" tabindex="-1"><a class="header-anchor" href="#html5有哪些新特性"><span>HTML5有哪些新特性</span></a></h3><ul><li>离线存储的支持</li><li>2d,3d绘图</li><li>丰富的效果</li><li>多媒体的支持</li><li>硬件的支持</li><li>性能的提升</li><li>新的通讯机制</li><li>新增语义化标签</li></ul><h3 id="常见的块级标签有哪些" tabindex="-1"><a class="header-anchor" href="#常见的块级标签有哪些"><span>常见的块级标签有哪些？</span></a></h3><ul><li>div</li><li>p</li><li>h1~h6</li><li>li</li><li>header</li><li>footer</li><li>nav</li><li>section</li><li>table</li><li>ol</li><li>td</li><li>tt</li><li>aside</li></ul><h3 id="块级盒子有哪些特征" tabindex="-1"><a class="header-anchor" href="#块级盒子有哪些特征"><span>块级盒子有哪些特征</span></a></h3><ul><li>独占一行</li><li>可以设置width和height</li><li>可以设置margin</li><li>可以设置padding</li></ul><h3 id="常见的行级标签有哪些" tabindex="-1"><a class="header-anchor" href="#常见的行级标签有哪些"><span>常见的行级标签有哪些？</span></a></h3><ul><li>span</li><li>a</li><li>b</li><li>stong</li><li>em</li><li>i</li><li>img</li><li>input</li><li>br</li><li>big</li><li>small</li><li>textarea</li><li>button</li><li>lable</li><li>code</li><li>select</li></ul><h3 id="行级盒子有哪些特征" tabindex="-1"><a class="header-anchor" href="#行级盒子有哪些特征"><span>行级盒子有哪些特征</span></a></h3><ul><li>一个挨着一个</li><li>不可以设置width和hright</li><li>可以设置水平的margin</li><li>可以设置水平的padding</li></ul><h3 id="盒模型有哪些属性" tabindex="-1"><a class="header-anchor" href="#盒模型有哪些属性"><span>盒模型有哪些属性</span></a></h3><ul><li>content</li><li>padding</li><li>margin</li><li>border</li></ul><h3 id="盒模型分为哪些类型" tabindex="-1"><a class="header-anchor" href="#盒模型分为哪些类型"><span>盒模型分为哪些类型？</span></a></h3><h4 id="标准盒模型" tabindex="-1"><a class="header-anchor" href="#标准盒模型"><span>标准盒模型</span></a></h4><p>标准盒模型的width = content</p><h4 id="ie盒模型" tabindex="-1"><a class="header-anchor" href="#ie盒模型"><span>IE盒模型</span></a></h4><p>IE和模型width = content + border + padding</p><h2 id="css相关" tabindex="-1"><a class="header-anchor" href="#css相关"><span>CSS相关</span></a></h2><h3 id="link方式和-import方式引入css有什么区别" tabindex="-1"><a class="header-anchor" href="#link方式和-import方式引入css有什么区别"><span>link方式和@import方式引入css有什么区别？</span></a></h3><h4 id="link" tabindex="-1"><a class="header-anchor" href="#link"><span>link</span></a></h4><ul><li><code>link</code>是属于标签，js可控，灵活</li><li>html文档是从上到下加载，<code>link</code>的方式引入是采用并行加载，性能更优</li></ul><h4 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>@import</span></a></h4><ul><li><code>@import</code>是不属于标签，js不可控，灵活性差</li><li>@import\`的方式引入是采用串行加载，性能更差</li></ul><h3 id="伪类选择器" tabindex="-1"><a class="header-anchor" href="#伪类选择器"><span>伪类选择器</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line">:last-child 获取最后一个子元素</span>
<span class="line">:first-child 获取第一个子元素</span>
<span class="line">:first-of-type 选择当前类型在父级是第一个</span>
<span class="line">:last-of-type 选择当前类型在父级的最后</span>
<span class="line">:nth-of-type 选择当地类型在父级的第x个</span>
<span class="line">:nth-child(odd) 选择当前为奇数的元素</span>
<span class="line">:nth-child(even) 选择当前为偶数的元素</span>
<span class="line">:link未 访问的链接</span>
<span class="line">:visiteed 已访问的链接</span>
<span class="line">:hover 鼠标悬停在上面触发</span>
<span class="line">:active 鼠标点击后的链接</span>
<span class="line">:focus 元素聚焦后触发</span>
<span class="line">:root 选择根节点</span>
<span class="line">:target 当前锚点活动的样式</span>
<span class="line">:checked 选择选中的样式</span>
<span class="line">:disabled 选择被禁用的</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="伪元素" tabindex="-1"><a class="header-anchor" href="#伪元素"><span>伪元素</span></a></h3><ul><li><p>::after 在当前元素后面插入新的内容</p></li><li><p>::before 在当前元素前面插入新的内容</p></li><li><p>::first-letter 向文本的第一个字母添加特殊样式</p></li><li><p>:first-line 向文本的首行添加特殊样式</p></li></ul><h3 id="选择器优先级" tabindex="-1"><a class="header-anchor" href="#选择器优先级"><span>选择器优先级</span></a></h3><h4 id="权重的等级" tabindex="-1"><a class="header-anchor" href="#权重的等级"><span>权重的等级</span></a></h4><p><code>!important</code> &gt; 内联 &gt; 设置 &gt; 默认 &gt; 继承</p><h4 id="权重的计算" tabindex="-1"><a class="header-anchor" href="#权重的计算"><span>权重的计算</span></a></h4><ul><li>内联千位</li><li>id百位</li><li>class、属性、伪类十位</li><li>伪元素、标签个位</li></ul><h4 id="权重的比较" tabindex="-1"><a class="header-anchor" href="#权重的比较"><span>权重的比较</span></a></h4><blockquote><p>在权重的比较重会遇到很多种情况,下面会对每一种情况说明</p></blockquote><ul><li>权重相同的情况下下面的覆盖上面的</li><li>两个都拥有<code>!important</code>，比较选择器的权重</li></ul><h3 id="属性值inherit、initial、unset的作用" tabindex="-1"><a class="header-anchor" href="#属性值inherit、initial、unset的作用"><span>属性值inherit、initial、unset的作用</span></a></h3><ul><li><code>inherit</code> 继承父级的样式</li><li><code>initial</code> 保持最初的样式</li><li><code>unset</code> 如果父级有可继承样式，就继承过来，没有初始的样式</li></ul><h3 id="继承属性有哪些" tabindex="-1"><a class="header-anchor" href="#继承属性有哪些"><span>继承属性有哪些？</span></a></h3><ul><li>color</li><li>font-size</li><li>font-weight</li><li>font-family</li></ul><h3 id="块级盒子居中" tabindex="-1"><a class="header-anchor" href="#块级盒子居中"><span>块级盒子居中</span></a></h3><p>margin: 0 auto</p><h3 id="设置inline-block的元素有什么特性" tabindex="-1"><a class="header-anchor" href="#设置inline-block的元素有什么特性"><span>设置inline-block的元素有什么特性</span></a></h3><ul><li>变成行内样式</li><li>可以设置width和height</li><li>可以设置margin和padding</li><li>会存在空白字符缝隙</li></ul><h3 id="inline-block产生缝隙的原因是什么-如何解决" tabindex="-1"><a class="header-anchor" href="#inline-block产生缝隙的原因是什么-如何解决"><span>inline-block产生缝隙的原因是什么？如何解决</span></a></h3><p>因为行内元素在一行会存在、换行/空白字符 在父级设置<code>font-size: 0</code></p><h3 id="聊一聊外边距合并的场景" tabindex="-1"><a class="header-anchor" href="#聊一聊外边距合并的场景"><span>聊一聊外边距合并的场景</span></a></h3><h4 id="相邻元素" tabindex="-1"><a class="header-anchor" href="#相邻元素"><span>相邻元素</span></a></h4><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>这个段落的下外边距被合并...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>...这个段落的上外边距被合并。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>相邻的两个兄弟的外边距，会取最大的值作为两个的外边距</p></blockquote><h4 id="父子元素" tabindex="-1"><a class="header-anchor" href="#父子元素"><span>父子元素</span></a></h4><blockquote><p>如果在父元素与其第一个子元素之间不存在边框、内边距、行内内容，也没有创建块格式化上下文、或者清除浮动将两者的 <code>margin-top</code> 分开，就会产生外边距合并。</p></blockquote><p>即内部标签与外部标签之间没有内边距，行内内容，并且外部标签没有边框，中间也没有元素</p><h4 id="空元素" tabindex="-1"><a class="header-anchor" href="#空元素"><span>空元素</span></a></h4><p>如果一个块级元素中不包含任何内容，并且在其垂直方向的 <code>margin</code> 之间没有边框、内边距、行内内容、<code>height</code>、<code>min-height</code> 将两者分开，则该元素的上下外边距会折叠。</p><h3 id="div内部图片底部出现缝隙原因是什么-有什么解决方案" tabindex="-1"><a class="header-anchor" href="#div内部图片底部出现缝隙原因是什么-有什么解决方案"><span>div内部图片底部出现缝隙原因是什么？有什么解决方案</span></a></h3><h4 id="原因" tabindex="-1"><a class="header-anchor" href="#原因"><span>原因</span></a></h4><blockquote><p>是因为我们在编辑器里写代码的时候，同级别的标签不写在同一 行以保持代码的整齐可读性，即inline-block布局的元素在编辑器里不在同一行，即存在换行符，因此这就是著名的inline-block“换行 符/空格间隙问题”。</p></blockquote><h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h4><ul><li>img 变成block</li><li>父级div设置font-size: 0</li><li>父级设置line-height: 0</li><li>img 设置vertical-align: middle/bottom/top</li></ul><h3 id="浮动元素有哪些特性-浮动带来的问题" tabindex="-1"><a class="header-anchor" href="#浮动元素有哪些特性-浮动带来的问题"><span>浮动元素有哪些特性？浮动带来的问题</span></a></h3><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h4><ul><li><p>一个挨着一个</p></li><li><p>盖不住文本</p></li></ul><h4 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h4><ul><li>引起父元素高度塌陷</li></ul><h3 id="如何清除浮动" tabindex="-1"><a class="header-anchor" href="#如何清除浮动"><span>如何清除浮动</span></a></h3><ul><li>父元素设置clear: both</li><li>父元素添加overflow:hidden</li></ul><h3 id="给元素添加clear-left的确切含义是什么" tabindex="-1"><a class="header-anchor" href="#给元素添加clear-left的确切含义是什么"><span>给元素添加clear: left的确切含义是什么</span></a></h3><p>要求该盒子，位于上边缘已有的左浮动盒子的下方</p><h3 id="什么是层叠上下文-如何形成叠上下文-层叠顺序是怎样的" tabindex="-1"><a class="header-anchor" href="#什么是层叠上下文-如何形成叠上下文-层叠顺序是怎样的"><span>什么是层叠上下文？如何形成叠上下文？层叠顺序是怎样的？</span></a></h3><h4 id="什么是层叠上下文" tabindex="-1"><a class="header-anchor" href="#什么是层叠上下文"><span>什么是层叠上下文？</span></a></h4><p>层叠上下文，英文称作”stacking context”. 是HTML中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素在z轴上就“高人一等”。</p><h4 id="如何形成叠上下文" tabindex="-1"><a class="header-anchor" href="#如何形成叠上下文"><span>如何形成叠上下文？</span></a></h4><ul><li>opactity小于1</li><li>根元素</li><li>transform不为none</li><li>z-index不为auto的绝对定位和相对定位元素</li><li>固定定位元素和sticky定位元素</li></ul><h4 id="层叠顺序是怎样的" tabindex="-1"><a class="header-anchor" href="#层叠顺序是怎样的"><span>层叠顺序是怎样的？</span></a></h4><ul><li>当具有明显的层叠水平标示的时候，如识别的z-indx值，在同一个层叠上下文领域中比较，层叠水平值大的那一个覆盖小的那一个。通俗讲就是官大的压死官小的。</li><li>当元素的层叠水平一致、层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。</li></ul><h3 id="什么是bfc-如何形成bfc-bfc有什么使用场景" tabindex="-1"><a class="header-anchor" href="#什么是bfc-如何形成bfc-bfc有什么使用场景"><span>什么是BFC？如何形成BFC？BFC有什么使用场景</span></a></h3><h4 id="什么是bfc" tabindex="-1"><a class="header-anchor" href="#什么是bfc"><span>什么是BFC？</span></a></h4><p>简称<strong>块级格式化上下文</strong>,英文block fromatting context，BFC是一块独立渲染的区域，外界无法干扰，里面的元素也无法干扰外界</p><h4 id="如何形成bfc" tabindex="-1"><a class="header-anchor" href="#如何形成bfc"><span>如何形成BFC？</span></a></h4><ul><li>根元素</li><li>float的值不为none</li><li>position的值不为relative和static</li><li>overflow的值不为visible (推荐使用此方法)</li><li>display 的值为 table-cell、table-caption 和 inline-block 中的任何一个</li></ul><h4 id="bfc有什么使用场景" tabindex="-1"><a class="header-anchor" href="#bfc有什么使用场景"><span>BFC有什么使用场景</span></a></h4><ul><li>阻住外边距合并</li><li>清除浮动</li><li>自适应两栏布局</li></ul><h2 id="javascript相关" tabindex="-1"><a class="header-anchor" href="#javascript相关"><span>JavaScript相关</span></a></h2><h3 id="async与defer有什么异同" tabindex="-1"><a class="header-anchor" href="#async与defer有什么异同"><span>async与defer有什么异同？</span></a></h3><h4 id="async" tabindex="-1"><a class="header-anchor" href="#async"><span>async</span></a></h4><p><code>async</code>异步加载js，不保证html,css是否加载完毕后加载，所以使用<code>async</code>获取dom，可能会报错</p><h4 id="defer" tabindex="-1"><a class="header-anchor" href="#defer"><span>defer</span></a></h4><p><code>defer</code>也是异步加载，会在html加载完后加载</p><h3 id="a-a-与a-a-的区别" tabindex="-1"><a class="header-anchor" href="#a-a-与a-a-的区别"><span>a+++a 与a+a++的区别</span></a></h3><p>对于如下代码，结果是多少？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token operator">++</span><span class="token operator">+</span>a <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于下面的代码，结果又是多少？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token operator">+</span>a<span class="token operator">++</span> <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题来了， a+++a等同于(a++)+a，而 a+a++等同于a+(a++)，二者结果为什么不一样？</strong></p><h4 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h4><blockquote><p>我们先理清楚，前置++和后置++的区别</p></blockquote><h5 id="前置" tabindex="-1"><a class="header-anchor" href="#前置"><span>前置++</span></a></h5><blockquote><p>先自身++，然后在参与其他的运算</p></blockquote><h5 id="后置" tabindex="-1"><a class="header-anchor" href="#后置"><span>后置++</span></a></h5><blockquote><p>先参与运算，然后在自身++</p></blockquote><h4 id="编译器的处理过程" tabindex="-1"><a class="header-anchor" href="#编译器的处理过程"><span>编译器的处理过程：</span></a></h4><div class="language-HTML line-numbers-mode" data-ext="HTML" data-title="HTML"><pre class="language-HTML"><code><span class="line">push(a++), 即push(1)，之后 a自增变成2</span>
<span class="line">push(a)，即push(2)</span>
<span class="line">result = pop()+pop(), 出栈两个操作数(1,2)相加，得到3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="当new一个构造函数时内部发生了什么" tabindex="-1"><a class="header-anchor" href="#当new一个构造函数时内部发生了什么"><span>当new一个构造函数时内部发生了什么</span></a></h3><ul><li>创建一个新的对象，这个对象的类型是<code> object</code></li><li>设置这个新的对象的内部、可访问性和<code>prototype</code>属性为构造函数（指<code>prototype.construtor</code>所指向的构造函数）中设置的；</li><li>执行构造函数，当<code>this</code>关键字被提及的时候，使用新创建的对象的属性； 返回新创建的对象（除非构造方法中返回的是‘无原型’）。</li><li>在创建新对象成功之后，如果调用一个新对象没有的属性的时候，<code>JavaScript</code> 会延原型链向止逐层查找对应的内容。这类似于传统的‘类继承’。</li></ul><h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链"><span>原型链</span></a></h2><p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（prototype ）。该原型对象也有一个自己的原型对象( <strong>proto</strong> ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</p><p>几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。</p><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h2><h3 id="变量的作用域" tabindex="-1"><a class="header-anchor" href="#变量的作用域"><span>变量的作用域</span></a></h3><ul><li>全局变量</li><li>局部变量</li></ul><h3 id="闭包的作用" tabindex="-1"><a class="header-anchor" href="#闭包的作用"><span>闭包的作用</span></a></h3><blockquote><p>可以让其他函数或作用域链，可以读取其内部的变量</p></blockquote>`,160);function p(h,r){const a=e("Boxx");return i(),n("div",null,[s(a),d])}const u=l(c,[["render",p],["__file","FontBasis.html.vue"]]),b=JSON.parse('{"path":"/blogs/interview/FontBasis.html","title":"前端面试题基础篇","lang":"en-US","frontmatter":{"title":"前端面试题基础篇","author":"Rain","tags":["面试","前端"],"categories":["interview"],"date":"2020-04-18 13:30"},"headers":[{"level":2,"title":"HTML相关","slug":"html相关","link":"#html相关","children":[{"level":3,"title":"如何声明页面是HTML5页面?","slug":"如何声明页面是html5页面","link":"#如何声明页面是html5页面","children":[]},{"level":3,"title":"页面乱码是如何产生的","slug":"页面乱码是如何产生的","link":"#页面乱码是如何产生的","children":[]},{"level":3,"title":"列举你所知道的meta类型有哪些","slug":"列举你所知道的meta类型有哪些","link":"#列举你所知道的meta类型有哪些","children":[]},{"level":3,"title":"列举你所知道的全局属性","slug":"列举你所知道的全局属性","link":"#列举你所知道的全局属性","children":[]},{"level":3,"title":"id与class有什么区别","slug":"id与class有什么区别","link":"#id与class有什么区别","children":[]},{"level":3,"title":"HTML语义化的作用","slug":"html语义化的作用","link":"#html语义化的作用","children":[]},{"level":3,"title":"a标签的target属性有哪些值","slug":"a标签的target属性有哪些值","link":"#a标签的target属性有哪些值","children":[]},{"level":3,"title":"HTML输入表单类型","slug":"html输入表单类型","link":"#html输入表单类型","children":[]},{"level":3,"title":"输入表单有哪些常见属性","slug":"输入表单有哪些常见属性","link":"#输入表单有哪些常见属性","children":[]},{"level":3,"title":"什么是HTML5","slug":"什么是html5","link":"#什么是html5","children":[]},{"level":3,"title":"HTML5新增了哪些标签和表单类型","slug":"html5新增了哪些标签和表单类型","link":"#html5新增了哪些标签和表单类型","children":[]},{"level":3,"title":"HTML5有哪些新特性","slug":"html5有哪些新特性","link":"#html5有哪些新特性","children":[]},{"level":3,"title":"常见的块级标签有哪些？","slug":"常见的块级标签有哪些","link":"#常见的块级标签有哪些","children":[]},{"level":3,"title":"块级盒子有哪些特征","slug":"块级盒子有哪些特征","link":"#块级盒子有哪些特征","children":[]},{"level":3,"title":"常见的行级标签有哪些？","slug":"常见的行级标签有哪些","link":"#常见的行级标签有哪些","children":[]},{"level":3,"title":"行级盒子有哪些特征","slug":"行级盒子有哪些特征","link":"#行级盒子有哪些特征","children":[]},{"level":3,"title":"盒模型有哪些属性","slug":"盒模型有哪些属性","link":"#盒模型有哪些属性","children":[]},{"level":3,"title":"盒模型分为哪些类型？","slug":"盒模型分为哪些类型","link":"#盒模型分为哪些类型","children":[]}]},{"level":2,"title":"CSS相关","slug":"css相关","link":"#css相关","children":[{"level":3,"title":"link方式和@import方式引入css有什么区别？","slug":"link方式和-import方式引入css有什么区别","link":"#link方式和-import方式引入css有什么区别","children":[]},{"level":3,"title":"伪类选择器","slug":"伪类选择器","link":"#伪类选择器","children":[]},{"level":3,"title":"伪元素","slug":"伪元素","link":"#伪元素","children":[]},{"level":3,"title":"选择器优先级","slug":"选择器优先级","link":"#选择器优先级","children":[]},{"level":3,"title":"属性值inherit、initial、unset的作用","slug":"属性值inherit、initial、unset的作用","link":"#属性值inherit、initial、unset的作用","children":[]},{"level":3,"title":"继承属性有哪些？","slug":"继承属性有哪些","link":"#继承属性有哪些","children":[]},{"level":3,"title":"块级盒子居中","slug":"块级盒子居中","link":"#块级盒子居中","children":[]},{"level":3,"title":"设置inline-block的元素有什么特性","slug":"设置inline-block的元素有什么特性","link":"#设置inline-block的元素有什么特性","children":[]},{"level":3,"title":"inline-block产生缝隙的原因是什么？如何解决","slug":"inline-block产生缝隙的原因是什么-如何解决","link":"#inline-block产生缝隙的原因是什么-如何解决","children":[]},{"level":3,"title":"聊一聊外边距合并的场景","slug":"聊一聊外边距合并的场景","link":"#聊一聊外边距合并的场景","children":[]},{"level":3,"title":"div内部图片底部出现缝隙原因是什么？有什么解决方案","slug":"div内部图片底部出现缝隙原因是什么-有什么解决方案","link":"#div内部图片底部出现缝隙原因是什么-有什么解决方案","children":[]},{"level":3,"title":"浮动元素有哪些特性？浮动带来的问题","slug":"浮动元素有哪些特性-浮动带来的问题","link":"#浮动元素有哪些特性-浮动带来的问题","children":[]},{"level":3,"title":"如何清除浮动","slug":"如何清除浮动","link":"#如何清除浮动","children":[]},{"level":3,"title":"给元素添加clear: left的确切含义是什么","slug":"给元素添加clear-left的确切含义是什么","link":"#给元素添加clear-left的确切含义是什么","children":[]},{"level":3,"title":"什么是层叠上下文？如何形成叠上下文？层叠顺序是怎样的？","slug":"什么是层叠上下文-如何形成叠上下文-层叠顺序是怎样的","link":"#什么是层叠上下文-如何形成叠上下文-层叠顺序是怎样的","children":[]},{"level":3,"title":"什么是BFC？如何形成BFC？BFC有什么使用场景","slug":"什么是bfc-如何形成bfc-bfc有什么使用场景","link":"#什么是bfc-如何形成bfc-bfc有什么使用场景","children":[]}]},{"level":2,"title":"JavaScript相关","slug":"javascript相关","link":"#javascript相关","children":[{"level":3,"title":"async与defer有什么异同？","slug":"async与defer有什么异同","link":"#async与defer有什么异同","children":[]},{"level":3,"title":"a+++a 与a+a++的区别","slug":"a-a-与a-a-的区别","link":"#a-a-与a-a-的区别","children":[]},{"level":3,"title":"当new一个构造函数时内部发生了什么","slug":"当new一个构造函数时内部发生了什么","link":"#当new一个构造函数时内部发生了什么","children":[]}]},{"level":2,"title":"原型链","slug":"原型链","link":"#原型链","children":[]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[{"level":3,"title":"变量的作用域","slug":"变量的作用域","link":"#变量的作用域","children":[]},{"level":3,"title":"闭包的作用","slug":"闭包的作用","link":"#闭包的作用","children":[]}]}],"git":{"createdTime":1717432393000,"updatedTime":1717432393000,"contributors":[{"name":"Rain","email":"smalltime153@gmail.com","commits":1}]},"filePathRelative":"blogs/interview/FontBasis.md"}');export{u as comp,b as data};
