import{_ as n,o as s,c as a,b as p}from"./app-B6NiJo-f.js";const e={},t=p(`<h2 id="一、服务流量限制的重要性" tabindex="-1"><a class="header-anchor" href="#一、服务流量限制的重要性"><span><strong>一、服务流量限制的重要性</strong></span></a></h2><p>随着业务规模的增长,服务的流量也会激增,大流量可能会压垮服务器,导致服务瘫痪。因此需对服务的流量进行限制,确保在大流量的情况下也能正常运行。</p><p>当流量激增时,会占用大量服务器资源和带宽,可能会压垮整个系统。比如流量激增期间数据库连接用尽,会导致服务无法访问数据库而宕机。用限制流量可以有效防止流量暴增压垮系统。</p><p>没有限流时,流量激增期间会启动很多无用的任务占用服务器资源,造成不必要的浪费。适当限流可以排队或拒绝无效请求,有效控制资源消耗使用。</p><h2 id="二、常见的限流算法" tabindex="-1"><a class="header-anchor" href="#二、常见的限流算法"><span><strong>二、常见的限流算法</strong></span></a></h2><p>限流的基本思想是通过算法预先设置阈值,当流量达到阈值时自动限制,常见的限流算法有:</p><ol><li>计数器算法</li></ol><p>计数器算法根据时间窗口内的请求数进行限制,基本思路是设置一个计数器统计时间窗口内的请求数,当请求数达到限流阈值时,就拒绝服务或者排队。</p><p>**优点： **实现简单,资源消耗少。</p><p>**缺点： **无法处理突发流量,时间窗口比较难确定合适的值。</p><ol start="2"><li>漏桶算法</li></ol><p>漏桶算法是限制请求通过的速率,基本思路是设置桶的容量和流出速率,如果请求流入速率过大会被桶阻止,根据固定速率流出,起到平滑调节速率的作用。</p><p>**优点： **可以很好地应对突发流量。</p><p>**缺点： **需要实时处理每一个请求,对系统资源消耗较大。</p><ol start="3"><li>令牌桶算法</li></ol><p>令牌桶算法按照固定速率向桶中放入令牌,每次请求需要消耗一个令牌,只有拿到令牌的请求才允许通过。放令牌的速率可以通过调节,实现不同速率的请求限流。</p><p>**优点： **拥堵控制能力更强,可自定义速率。</p><p>**缺点： **需要实时处理请求,系统资源消耗依然比较大。</p><h2 id="三、限流实战" tabindex="-1"><a class="header-anchor" href="#三、限流实战"><span><strong>三、限流实战</strong></span></a></h2><ol><li>使用计数器限制总请求数</li></ol><p>计数器算法主要是基于时间窗口和计数器来进行限制的。下面来看一个基于计数器进行限流的实现:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">package</span> limit</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;sync/atomic&quot;</span></span>
<span class="line">    <span class="token string">&quot;time&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 计数器限流器</span></span>
<span class="line"><span class="token keyword">type</span> CounterLimiter <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    count      <span class="token builtin">uint64</span> <span class="token comment">// 当前计数</span></span>
<span class="line">    lastUpdate <span class="token builtin">int64</span>  <span class="token comment">// 上次更新的时间</span></span>
<span class="line"></span>
<span class="line">    limitPerSec <span class="token builtin">uint64</span> <span class="token comment">// 每秒限制的请求数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建计数器限流器</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewCounterLimiter</span><span class="token punctuation">(</span>limitPerSec <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token operator">*</span>CounterLimiter <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>CounterLimiter<span class="token punctuation">{</span></span>
<span class="line">        count<span class="token punctuation">:</span>      <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        lastUpdate<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        limitPerSec<span class="token punctuation">:</span> limitPerSec<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 实现限流器接口的Allow()</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CounterLimiter<span class="token punctuation">)</span> <span class="token function">Allow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">    now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    elapse <span class="token operator">:=</span> now <span class="token operator">-</span> c<span class="token punctuation">.</span>lastUpdate</span>
<span class="line"></span>
<span class="line">    c<span class="token punctuation">.</span>lastUpdate <span class="token operator">=</span> now</span>
<span class="line">    addedCount <span class="token operator">:=</span> elapse <span class="token operator">*</span> c<span class="token punctuation">.</span>limitPerSec</span>
<span class="line"></span>
<span class="line">    c<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>addedCount<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> c<span class="token punctuation">.</span>count <span class="token operator">&gt;</span> c<span class="token punctuation">.</span>limitPerSec <span class="token punctuation">{</span></span>
<span class="line">        c<span class="token punctuation">.</span>count <span class="token operator">=</span> c<span class="token punctuation">.</span>limitPerSec</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> c<span class="token punctuation">.</span>count <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>limitPerSec <span class="token punctuation">{</span></span>
<span class="line">        c<span class="token punctuation">.</span>count<span class="token operator">++</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于计数器的限流器 CounterLimiter，主要逻辑是</p><p>创建限流器时指定限流频率 limitPerSec</p><p>Allow() 方法校验是否限流</p><ul><li>计算当前时间和上次更新时间差 elapsed</li><li>根据时间差计算这段时间新增的限流额度 addedCount</li><li>计数器统计值增加 addedCount</li><li>判断计数器是否达到阈值</li><li>到达阈值则限流,未到则计数 +1 并放行</li></ul><p>只需要创建一个限流器,并在请求处理前调用 Allow() 方法判断是否限流即可。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">httpHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  limiter <span class="token operator">:=</span> <span class="token function">NewCounterLimiter</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token operator">!</span>limiter<span class="token punctuation">.</span><span class="token function">Allow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">StatusText</span><span class="token punctuation">(</span><span class="token number">429</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      http<span class="token punctuation">.</span>StatusTooManyRequests<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 核心逻辑</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用漏桶算法限制请求通过速率</li></ol><p>漏桶算法需要设置一个桶的容量 capacity,和漏出流量的速率 flow per second。如果请求流入速度过快,会被桶的容量限制而丢弃。</p><p>使用漏桶算法实现请求通过速率限流的示例:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">type</span> LeakyBucket <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">  capacity     <span class="token builtin">int64</span> <span class="token comment">// 桶容量</span></span>
<span class="line">  used         <span class="token builtin">int64</span> <span class="token comment">// 当前已使用</span></span>
<span class="line">  mu           sync<span class="token punctuation">.</span>Mutex</span>
<span class="line">  lastLeakTime time<span class="token punctuation">.</span>Time <span class="token comment">// 上次漏水时间</span></span>
<span class="line"></span>
<span class="line">  flow <span class="token builtin">int64</span> <span class="token comment">// 每秒流速</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建漏桶限流器</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewLeakyBucket</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> flow <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>LeakyBucket <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&amp;</span>LeakyBucket<span class="token punctuation">{</span></span>
<span class="line">    capacity<span class="token punctuation">:</span> capacity<span class="token punctuation">,</span></span>
<span class="line">    used<span class="token punctuation">:</span>     <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    flow<span class="token punctuation">:</span>     flow<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 实现限流器接口的Allow()</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LeakyBucket<span class="token punctuation">)</span> <span class="token function">Allow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">  l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">defer</span> l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  l<span class="token punctuation">.</span><span class="token function">leak</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> l<span class="token punctuation">.</span>used <span class="token operator">&gt;=</span> l<span class="token punctuation">.</span>capacity <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  l<span class="token punctuation">.</span>used <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 漏水处理</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LeakyBucket<span class="token punctuation">)</span> <span class="token function">leak</span><span class="token punctuation">(</span>now time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  delta <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>lastLeakTime<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  leaked <span class="token operator">:=</span> delta<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">float64</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>flow<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 计算这段间隔内的漏水量</span></span>
<span class="line">  leakedInt <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>leaked<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> leakedInt <span class="token operator">&gt;</span> <span class="token punctuation">(</span>l<span class="token punctuation">.</span>used<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 漏出了全部水</span></span>
<span class="line">    l<span class="token punctuation">.</span>used <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    l<span class="token punctuation">.</span>used <span class="token operator">-=</span> leakedInt</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  l<span class="token punctuation">.</span>lastLeakTime <span class="token operator">=</span> now</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>漏桶算法的实现主要分为两个部分:</p><ul><li>A llow() 方法检查当前使用量是否达到桶容量,未到则请求数 +1 并返回 true,已到则返回 false 限流</li><li>leak() 方法按照固定流速进行漏水,对应速率进行的限流</li></ul><p>可通过设置桶容量和流速,来限制请求通过系统的速率了。</p><ol start="3"><li>使用令牌桶算法释放固定数额的令牌</li></ol><p>令牌桶算法的主要逻辑是按照一定速率往桶中放入令牌。</p><p>请求在处理前需要先获取令牌,如果没有可用令牌则丢弃该请求或进入队列等待。</p><p>下面是使用令牌桶算法实现的限流器:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">package</span> limit</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;sync&quot;</span></span>
<span class="line">  <span class="token string">&quot;time&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 令牌桶算法限流器</span></span>
<span class="line"><span class="token keyword">type</span> TokenBucket <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">  capacity   <span class="token builtin">int64</span> <span class="token comment">// 桶容量</span></span>
<span class="line">  rate       <span class="token builtin">int64</span> <span class="token comment">// 令牌放入速率</span></span>
<span class="line">  tokens     <span class="token builtin">int64</span> <span class="token comment">// 当前令牌数</span></span>
<span class="line">  lastUpdate <span class="token builtin">int64</span> <span class="token comment">// 上次添加令牌的时间</span></span>
<span class="line">  mu         sync<span class="token punctuation">.</span>Mutex</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建令牌桶限流器</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewTokenBucket</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> rate <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>TokenBucket <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&amp;</span>TokenBucket<span class="token punctuation">{</span>capacity<span class="token punctuation">:</span> capacity<span class="token punctuation">,</span> rate<span class="token punctuation">:</span> rate<span class="token punctuation">,</span> tokens<span class="token punctuation">:</span> capacity<span class="token punctuation">,</span> lastUpdate<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Allow 方法实现限流器接口</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>TokenBucket<span class="token punctuation">)</span> <span class="token function">Allow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">  t<span class="token punctuation">.</span><span class="token function">addTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  t<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">defer</span> t<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> t<span class="token punctuation">.</span>tokens <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  t<span class="token punctuation">.</span>tokens<span class="token operator">--</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 按速率添加令牌</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>TokenBucket<span class="token punctuation">)</span> <span class="token function">addTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  elapse <span class="token operator">:=</span> now <span class="token operator">-</span> t<span class="token punctuation">.</span>lastUpdate</span>
<span class="line">  add <span class="token operator">:=</span> elapse <span class="token operator">*</span> t<span class="token punctuation">.</span>rate</span>
<span class="line">  t<span class="token punctuation">.</span>lastUpdate <span class="token operator">=</span> now</span>
<span class="line">  t<span class="token punctuation">.</span>tokens <span class="token operator">+=</span> add</span>
<span class="line">  <span class="token keyword">if</span> t<span class="token punctuation">.</span>tokens <span class="token operator">&gt;</span> t<span class="token punctuation">.</span>capacity <span class="token punctuation">{</span></span>
<span class="line">    t<span class="token punctuation">.</span>tokens <span class="token operator">=</span> t<span class="token punctuation">.</span>capacity</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要逻辑分为两部分:</p><ul><li>Allow() 方法处理请求前获取令牌</li><li>addTokens() 方法按照速率往桶中添加令牌</li></ul><p>调整桶容量和添加令牌的速率,来达到平滑限流的效果。</p><ol start="4"><li>封装限流中间件,便于业务复用</li></ol><p>在上例中,实现了通用的限流器接口,包含创建限流器和 Allow() 校验方法。可以基于这个接口,进一步封装成限流中间件。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">package</span> limit</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;net/http&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 中间件实现</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">LimitMiddleware</span><span class="token punctuation">(</span>handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span> limiter Limiter<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span></span>
<span class="line">    r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>limiter<span class="token punctuation">.</span><span class="token function">Allow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">      http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">StatusText</span><span class="token punctuation">(</span><span class="token number">429</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        http<span class="token punctuation">.</span>StatusTooManyRequests<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 使用方式</span></span>
<span class="line">  limiter <span class="token operator">:=</span> <span class="token function">NewTokenBucket</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> rate<span class="token punctuation">)</span></span>
<span class="line">  http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token function">LimitMiddleware</span><span class="token punctuation">(</span>myHandler<span class="token punctuation">,</span> limiter<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、优化限流策略" tabindex="-1"><a class="header-anchor" href="#四、优化限流策略"><span><strong>四、优化限流策略</strong></span></a></h2><p>很多时候业务访问量会有周期性波动或突发变化, 需要能够检测实时流量,动态调整限流参数。比如可以根据每分钟的请求量实时调整下一分钟的限流阈值。</p><p>根据业务需要可以设置自定义策略,比如对重要接口限流预留更多资源,对次要接口限流更严格等。允许更加细粒度地控制限流。</p><p>可以根据服务器负载、平均响应时间等指标,动态决定是否需要限流以保护系统。在流量大幅增长时自动跟进限制。</p><h2 id="五、使用-redis-实现分布式限流" tabindex="-1"><a class="header-anchor" href="#五、使用-redis-实现分布式限流"><span><strong>五、使用 Redis 实现分布式限流</strong></span></a></h2><p>之前的限流方式都是在单机上通过计数或时间实现,存在一定的不足。可使用 Redis 实现分布式限流。</p><p>Redis 的性能和扩展性优势：</p><p>Redis 单机可以达到 10 万 + QPS 的性能, pipeline 批量操作可以进一步提升这一指标。此外 Redis 很容易通过主从复制和分片来进行扩展。正是得益于这些优势,才使得它非常适合实现分布式限流。</p><p>利用 Redis 的计数器和定时任务实现分布式限制 ，主要的思想是:</p><ul><li>对每个唯一请求路径维护一个计数器</li><li>每次请求计数器 +1</li><li>当计数器达到阈值则返回限流</li><li>通过定时任务定期重置计数器计数</li></ul><p>客户端请求时通过 Lua 脚本 canRequest.lua 来进行判断:</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token comment">-- canRequest.lua 限流判断脚本</span></span>
<span class="line"><span class="token keyword">local</span> key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">local</span> limit <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> current <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> current <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> limit <span class="token keyword">then</span> </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line">    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;INCRBY&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;expire&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用一个唯一键 key 存储计数器,并设置 key 的过期时间,比如 1 秒。根据 key 的当前计数是否达到阈值来拒绝请求。可轻松通过 Redis 实现分布式限流,并可以横向扩展提高效率。</p>`,59),l=[t];function c(i,o){return s(),a("div",null,l)}const k=n(e,[["render",c],["__file","rateLimiter.html.vue"]]),d=JSON.parse('{"path":"/blogs/backend/rateLimiter.html","title":"限流组件实现","lang":"en-US","frontmatter":{"title":"限流组件实现","author":"Rain","tags":["Golang","高并发"],"categories":["backend"],"date":"2024-02-07T23:01:07.000Z"},"headers":[{"level":2,"title":"一、服务流量限制的重要性","slug":"一、服务流量限制的重要性","link":"#一、服务流量限制的重要性","children":[]},{"level":2,"title":"二、常见的限流算法","slug":"二、常见的限流算法","link":"#二、常见的限流算法","children":[]},{"level":2,"title":"三、限流实战","slug":"三、限流实战","link":"#三、限流实战","children":[]},{"level":2,"title":"四、优化限流策略","slug":"四、优化限流策略","link":"#四、优化限流策略","children":[]},{"level":2,"title":"五、使用 Redis 实现分布式限流","slug":"五、使用-redis-实现分布式限流","link":"#五、使用-redis-实现分布式限流","children":[]}],"git":{"createdTime":1717432393000,"updatedTime":1717432393000,"contributors":[{"name":"Rain","email":"smalltime153@gmail.com","commits":1}]},"filePathRelative":"blogs/backend/rateLimiter.md"}');export{k as comp,d as data};
